#!/usr/bin/env python
 
# probably not all these required some are legacy and no longer used.
from dbus.mainloop.glib import DBusGMainLoop
import gobject
from gobject import idle_add
import dbus
import dbus.service
import inspect
import platform
from threading import Timer
import argparse
import sys
import os
import requests # for http GET
from pyModbusTCP.client import ModbusClient
import time
import ctypes

# our own packages
sys.path.insert(1, os.path.join(os.path.dirname(__file__), '/opt/victronenergy/dbus-modem'))
from vedbus import VeDbusService

# ----------------------------------------------------------------
VERSION     = "0.1"
SERVER_HOST = "x.x.x.x"
SERVER_PORT = 502
SERVER_UNIT = 126
# ----------------------------------------------------------------
CONNECTION  = "ModbusTCP " + SERVER_HOST + ":" + str(SERVER_PORT) + ", UNIT " + str(SERVER_UNIT)

# sunspec modbus registers:
# 40000  2  C_SunSpec_ID uint32 Value = "SunS" (0x53756e53).  Uniquely identifies this as a SunSpec MODBUS Map 
# 40002  1  C_SunSpec_DID uint16 Value = 0x0001.  Uniquely identifies this as a SunSpec Common Model Block 
# 40003  1  C_SunSpec_Length uint16 65 = Length of block in 16-bit registers 
# 40004 16  C_Manufacturer String(32) Value Registered with SunSpec = "SolarEdge " 
# 40020 16  C_Model String(32) SolarEdge Specific Value 
# 40044  8  C_Version String(16) SolarEdge Specific Value 
# 40052 16  C_SerialNumber String(32) SolarEdge Unique Value  
# 40068  1  C_DeviceAddress uint16 MODBUS Unit ID 
#
#    The following I_Status_* values are supported: 
#    Parameter           Value Description 
#    I_STATUS_OFF            1 Off 
#    I_STATUS_SLEEPING       2 Sleeping (auto-shutdown) Night mode 
#    I_STATUS_STARTING       3 Grid Monitoring/wake-up 
#    I_STATUS_MPPT           4 Inverter is ON and producing power 
#    I_STATUS_THROTTLED      5 Production (curtailed) 
#    I_STATUS_SHUTTING_DOWN  6 Shutting down 
#    I_STATUS_FAULT          7 Fault 
#    I_STATUS_STANDBY        8 Maintenance/setup
#
# 40069  1  C_SunSpec_DID uint16 (101 = single phase, 102 = split phase, 103 = three phase)
# 40070  1  C_SunSpec_Length uint16 Registers 50 = Length of model block 
# 40071  1  I_AC_Current uint16 Amps AC Total Current value 
# 40072  1  I_AC_CurrentA uint16 Amps AC Phase A Current value 
# 40073  1  I_AC_CurrentB uint16 Amps AC Phase B Current value 
# 40074  1  I_AC_CurrentC uint16 Amps AC Phase C Current value 
# 40075  1  I_AC_Current_SF int16  AC Current scale factor 
# 40076  1  I_AC_VoltageAB uint16 Volts AC Voltage Phase AB value 
# 40077  1  I_AC_VoltageBC uint16 Volts AC Voltage Phase BC value 
# 40078  1  I_AC_VoltageCA uint16 Volts AC Voltage Phase CA value 
# 40079  1  I_AC_VoltageAN 1 uint16 Volts AC Voltage Phase A to N value 
# 40080  1  I_AC_VoltageBN 1 uint16 Volts AC Voltage Phase B to N value 
# 40081  1  I_AC_VoltageCN 1 uint16 Volts AC Voltage Phase C to N value 
# 40082  1  I_AC_Voltage_SF int16  AC Voltage  scale factor 
# 40083  1  I_AC_Power int16 Watts AC Power value 
# 40084  1  I_AC_Power_SF int16  AC Power scale factor 
# 40085  1  I_AC_Frequency uint16 Hertz AC Frequency value 
# 40086  1  I_AC_Frequency_SF int16  Scale factor 
# 40087  1  I_AC_VA int16 VA Apparent Power 
# 40088  1  I_AC_VA_SF int16  Scale factor 
# 40089  1  I_AC_VAR int16 VAR Reactive Power 
# 40090  1  I_AC_VAR_SF int16  Scale factor 
# 40091  1  I_AC_PF int16 % Power Factor 
# 40092  1  I_AC_PF_SF int16  Scale factor 
# 40093  2  I_AC_Energy_WH acc32 WattHours AC Lifetime Energy production 
# 40095  1  I_AC_Energy_WH_SF uint16  Scale factor 
# 40096  1  I_DC_Current uint16 Amps DC Current value 
# 40097  1  I_DC_Current_SF int16  Scale factor 
# 40098  1  I_DC_Voltage uint16 Volts DC Voltage value 
# 40099  1  I_DC_Voltage_SF int16  Scale factor 
# 40100  1  I_DC_Power int16 Watts DC Power value 
# 40101  1  I_DC_Power_SF int16  Scale factor 
# 40103  1  I_Temp_Sink int16 Degrees C Heat Sink Temperature 
# 40106  1  I_Temp_SF int16  Scale factor 
# 40107  1  I_Status uint16  Operating State 
# 40108  1  I_Status_Vendor uint16 
#
# 40121  1  C_SunSpec_DID uint16 N/A Value = 0x0001. Uniquely identifies this as a SunSpec Common Model Block 
# 40122  1  C_SunSpec_Length uint16 N/A 65 = Length of block in 16-bit registers 
# 40123 16  C_Manufacturer String(32) N/A Meter manufacturer 
# 40139 16  C_Model String(32) N/A Meter model 
# 40155  8  C_Option String(16) N/A Export + Import, Production, consumption, 
# 40163  8  C_Version String(16) N/A Meter version 
# 40171 16  C_SerialNumber String(32) N/A Meter SN 
# 40187  1  C_DeviceAddress uint16 N/A Inverter Modbus ID
#
# Identification 
# 40188  1  C_SunSpec_DID uint16 N/A Well-known value. Uniquely identifies this as a SunSpecMODBUS Map: 
#           Single Phase (AN or AB) Meter (201) Split Single 
#           Phase (ABN) Meter (202) 
#           Wye-Connect Three Phase (ABCN) Meter (203) 
#           Delta-Connect Three Phase (ABC) Meter(204) 
# 40189  1  C_SunSpec_Length uint16 Registers Length of meter model block 
# Current  
# 40190  1  M_AC_Current int16 Amps AC Current (sum of active phases) 
# 40191  1  M_AC_Current_A int16 Amps Phase A AC Current 
# 40192  1  M_AC_Current_B int16 Amps Phase B AC Current 
# 40193  1  M_AC_Current_C int16 Amps Phase C AC Current 
# 40194  1  M_AC_Current_S F int16 SF AC Current Scale Factor 
# Voltage 
# Line to Neutral Voltage 
# 40195  1  M_AC_Voltage_L N int16 Volts Line to Neutral AC Voltage (average of active phases) 
# 40196  1  M_AC_Voltage_A N int16 Volts Phase A to Neutral AC Voltage 
# 40197  1  M_AC_Voltage_B N int16 Volts Phase B to Neutral AC Voltage 
# 40198  1  M_AC_Voltage_C N int16 Volts Phase C to Neutral AC Voltage 
# Line to Line Voltage 
# 40199  1  M_AC_Voltage_L L int16 Volts Line to Line AC Voltage (average of active phases) 
# 40200  1  M_AC_Voltage_A B int16 Volts Phase A to Phase B AC Voltage 
# 40201  1  M_AC_Voltage_B C int16 Volts Phase B to Phase C AC Voltage 
# 40202  1  M_AC_Voltage_C A int16 Volts Phase C to Phase A AC Voltage 
# 40203  1  M_AC_Voltage_S F int16 SF AC Voltage Scale Factor 
# Frequency 
# 40204  1  M_AC_Freq int16 Herts AC Frequency 
# 40205  1  M_AC_Freq_SF int16 SF AC Frequency Scale Factor 
# Power 
# Real Power 
# 40206  1  M_AC_Power int16 Watts Total Real Power (sum of active phases) 
# 40207  1  M_AC_Power_A int16 Watts Phase A AC Real Power 
# 40208  1  M_AC_Power_B int16 Watts Phase B AC Real Power 
# 40209  1  M_AC_Power_C int16 Watts Phase C AC Real Power 
# 40210  1  M_AC_Power_SF int16 SF AC Real Power Scale Factor 
# Apparent Power 
# 40211  1  M_AC_VA int16 Volt- Amps Total AC Apparent Power (sum of active phases) 
# 40212  1  M_AC_VA_A int16 Volt- Amps Phase A AC Apparent Power 
# 40213  1  M_AC_VA_B int16 Volt- Amps Phase B AC Apparent Power 
# 40214  1  M_AC_VA_C int16 Volt- Amps Phase C AC Apparent Power 
# 40215  1  M_AC_VA_SF int16 SF AC Apparent Power Scale Factor 
# Reactive Power 
# 40216  1  M_AC_VAR int16 VAR Total AC Reactive Power (sum of active phases) 
# 40217  1  M_AC_VAR_A int16 VAR Phase A AC Reactive Power 
# 40218  1  M_AC_VAR_B int16 VAR Phase B AC Reactive Power 
# 40219  1  M_AC_VAR_C int16 VAR Phase C AC Reactive Power 
# 40220  1  M_AC_VAR_SF int16 SF AC Reactive Power Scale Factor 
# Power Factor 
# 40221  1  M_AC_PF int16 % Average Power Factor (average of active phases) 
# 40222  1  M_AC_PF_A int16 % Phase A Power Factor 
# 40223  1  M_AC_PF_B int16 % Phase B Power Factor 
# 40224  1  M_AC_PF_C int16 % Phase C Power Factor 
# 40225  1  M_AC_PF_SF int16 SF AC Power Factor Scale Factor 
# Accumulated Energy 
# Real Energy 
# 40226  2  M_Exported uint32 Watt- hours Total Exported Real Energy 
# 40228  2  M_Exported_A uint32 Watt- hours Phase A Exported Real Energy 
# 40230  2  M_Exported_B uint32 Watt- hours Phase B Exported Real Energy 
# 40232  2  M_Exported_C uint32 Watt- hours Phase C Exported Real Energy 
# 40234  2  M_Imported uint32 Watt- hours Total Imported Real Energy 
# 40236  2  M_Imported_A uint32 Watt- hours Phase A Imported Real Energy 
# 40238  2  M_Imported_B uint32 Watt- hours Phase B Imported Real Energy 
# 40240  2  M_Imported_C uint32 Watt- hours Phase C Imported Real Energy 
# 40242  1  M_Energy_W_SF int16 SF Real Energy Scale Factor 
# Apparent Energy 
# 40243  2  M_Exported_VA uint32 VA-hours Total Exported Apparent Energy 
# 40245  2  M_Exported_VA_ A uint32 VA-hours Phase A Exported Apparent Energy 
# 40247  2  M_Exported_VA_ B uint32 VA-hours Phase B Exported Apparent Energy 
# 40249  2  M_Exported_VA_ C uint32 VA-hours Phase C Exported Apparent Energy 
# 40251  2  M_Imported_VA uint32 VA-hours Total Imported Apparent Energy 
# 40253  2  M_Imported_VA_ A uint32 VA-hours Phase A Imported Apparent Energy 
# 40255  2  M_Imported_VA_ B uint32 VA-hours Phase B Imported Apparent Energy 
# 40257  2  M_Imported_VA_ C uint32 VA-hours Phase C Imported Apparent Energy 
# 40259  1  M_Energy_VA_S F int16 SF Apparent Energy Scale Factor

c = ModbusClient()

# define modbus server host, port
c.host(SERVER_HOST)
c.port(SERVER_PORT)
c.unit_id(SERVER_UNIT)
c.auto_open=True

# open or reconnect TCP to server
if not c.is_open():
    if not c.open():
        print("unable to connect to "+SERVER_HOST+":"+str(SERVER_PORT))
        sys.exit()


def _get_string(regs):
    numbers = []
    for x in regs:
	if (((x >> 8) & 0xFF) != 0):
            numbers.append((x >> 8) & 0xFF)
	if (((x >> 0) & 0xFF) != 0):
            numbers.append((x >> 0) & 0xFF)
    return ("".join(map(chr, numbers)))

def _get_signed_short(regs):
    return ctypes.c_short(regs).value

def _get_scale_factor(regs):
    return 10**_get_signed_short(regs)

def _get_victron_pv_state(state):
    if (state == 1):
        return 0 
    elif (state == 3):
        return 1
    elif (state == 4):
        return 11
    elif (state == 5):
        return 12
    elif (state == 7):
        return 10
    else:
        return 8
    

# Again not all of these needed this is just duplicating the Victron code.
class SystemBus(dbus.bus.BusConnection):
    def __new__(cls):
        return dbus.bus.BusConnection.__new__(cls, dbus.bus.BusConnection.TYPE_SYSTEM)
 
class SessionBus(dbus.bus.BusConnection):
    def __new__(cls):
        return dbus.bus.BusConnection.__new__(cls, dbus.bus.BusConnection.TYPE_SESSION)
 
def dbusconnection():
    return SessionBus() if 'DBUS_SESSION_BUS_ADDRESS' in os.environ else SystemBus()
 
# Have a mainloop, so we can send/receive asynchronous calls to and from dbus
DBusGMainLoop(set_as_default=True)

def _update():
    # if open() is ok, read register (modbus function 0x03)
    if c.is_open():
        # read registers, store result in regs list
        regs = c.read_holding_registers(40190, 70)
        if regs:
           sf = _get_scale_factor(regs[4])
            dbusservice['grid']['/Ac/L1/Current'] = _get_signed_short(regs[1]) * sf
            dbusservice['grid']['/Ac/L2/Current'] = _get_signed_short(regs[2]) * sf
            dbusservice['grid']['/Ac/L3/Current'] = _get_signed_short(regs[3]) * sf
            sf = _get_scale_factor(regs[13])
            dbusservice['grid']['/Ac/L1/Voltage'] = _get_signed_short(regs[6]) * sf
            dbusservice['grid']['/Ac/L2/Voltage'] = _get_signed_short(regs[7]) * sf
            dbusservice['grid']['/Ac/L3/Voltage'] = _get_signed_short(regs[8]) * sf
            sf = _get_scale_factor(regs[20])
            dbusservice['grid']['/Ac/Power'] = _get_signed_short(regs[16]) * sf * -1 
            dbusservice['grid']['/Ac/L1/Power'] = _get_signed_short(regs[17]) * sf * -1
            dbusservice['grid']['/Ac/L2/Power'] = _get_signed_short(regs[18]) * sf * -1
            dbusservice['grid']['/Ac/L3/Power'] = _get_signed_short(regs[19]) * sf * -1
            sf = _get_scale_factor(regs[52])
            dbusservice['grid']['/Ac/Energy/Reverse'] = float((regs[36] << 16) + regs[37]) * sf / 1000
            dbusservice['grid']['/Ac/L1/Energy/Reverse'] = float((regs[38] << 16) + regs[39]) * sf / 1000
            dbusservice['grid']['/Ac/L2/Energy/Reverse'] = float((regs[40] << 16) + regs[41]) * sf / 1000
            dbusservice['grid']['/Ac/L3/Energy/Reverse'] = float((regs[42] << 16) + regs[43]) * sf / 1000
            dbusservice['grid']['/Ac/Energy/Forward'] = float((regs[44] << 16) + regs[45]) * sf / 1000
            dbusservice['grid']['/Ac/L1/Energy/Forward'] = float((regs[46] << 16) + regs[47]) * sf / 1000
            dbusservice['grid']['/Ac/L2/Energy/Forward'] = float((regs[48] << 16) + regs[49]) * sf / 1000
            dbusservice['grid']['/Ac/L3/Energy/Forward'] = float((regs[50] << 16) + regs[51]) * sf / 1000

        # read registers, store result in regs list
        regs = c.read_holding_registers(40071, 38)
        if regs:
           sf = _get_scale_factor(regs[4])
           dbusservice['pvinverter.pv0']['/Ac/L1/Current'] = regs[1] * sf
           dbusservice['pvinverter.pv0']['/Ac/L2/Current'] = regs[2] * sf
           dbusservice['pvinverter.pv0']['/Ac/L3/Current'] = regs[3] * sf
           sf = _get_scale_factor(regs[11])
           dbusservice['pvinverter.pv0']['/Ac/L1/Voltage'] = regs[8] * sf
           dbusservice['pvinverter.pv0']['/Ac/L2/Voltage'] = regs[9] * sf
           dbusservice['pvinverter.pv0']['/Ac/L3/Voltage'] = regs[10] * sf
           sf = _get_scale_factor(regs[13])
           acpower = _get_signed_short(regs[12]) * sf
           dbusservice['pvinverter.pv0']['/Ac/Power'] = acpower
           dbusservice['pvinverter.pv0']['/Ac/L1/Power'] = _get_signed_short(regs[12]) * sf / 3
           dbusservice['pvinverter.pv0']['/Ac/L2/Power'] = _get_signed_short(regs[12]) * sf / 3
           dbusservice['pvinverter.pv0']['/Ac/L3/Power'] = _get_signed_short(regs[12]) * sf / 3
           sf = _get_scale_factor(regs[24])
           dbusservice['pvinverter.pv0']['/Ac/Energy/Forward'] = float((regs[22] << 16) + regs[23]) * sf / 1000
           dbusservice['pvinverter.pv0']['/Ac/L1/Energy/Forward'] = float((regs[22] << 16) + regs[23]) * sf / 3 / 1000
           dbusservice['pvinverter.pv0']['/Ac/L2/Energy/Forward'] = float((regs[22] << 16) + regs[23]) * sf / 3 / 1000
           dbusservice['pvinverter.pv0']['/Ac/L3/Energy/Forward'] = float((regs[22] << 16) + regs[23]) * sf / 3 / 1000
           
           dbusservice['pvinverter.pv0']['/StatusCode'] = _get_victron_pv_state(regs[36])
           dbusservice['pvinverter.pv0']['/ErrorCode'] = regs[37]

           sf = _get_scale_factor(regs[35])
           dbusservice['adc-temp0']['/Temperature'] = regs[32] * sf

           if ((regs[36] == 5) & (acpower > 100)):
               dbusservice['digitalinput0']['/State'] = 3
               dbusservice['digitalinput0']['/Alarm'] = 2
           else:
               dbusservice['digitalinput0']['/State'] = 2
               dbusservice['digitalinput0']['/Alarm'] = 0

        else:
	   sys.exit()                                                                             

    return True
 
# Here is the bit you need to create multiple new services - try as much as possible timplement the Victron Dbus API requirements.
def new_service(base, type, physical, id, instance):
    self =  VeDbusService("{}.{}.{}_id{:02d}".format(base, type, physical,  id), dbusconnection())

    # Create the management objects, as specified in the ccgx dbus-api document
    self.add_path('/Mgmt/ProcessName', __file__)
    self.add_path('/Mgmt/ProcessVersion', 'Unkown version, and running on Python ' + platform.python_version())
    self.add_path('/Connected', 1)  
    self.add_path('/HardwareVersion', 0)

    _kwh = lambda p, v: (str(v) + 'kWh')
    _a = lambda p, v: (str(v) + 'A')
    _w = lambda p, v: (str(v) + 'W')
    _v = lambda p, v: (str(v) + 'V')
    _c = lambda p, v: (str(v) + 'C')

    # Create device type specific objects
    if physical == 'grid':
        # if open() is ok, read register (modbus function 0x03)
        if c.is_open():
            # read registers, store result in regs list
            regs = c.read_holding_registers(40123, 64)
            if regs:
                self.add_path('/DeviceInstance', instance)
                self.add_path('/FirmwareVersion', _get_string(regs[40:47]))
                self.add_path('/DataManagerVersion', VERSION)
                self.add_path('/Serial', _get_string(regs[48:63]))
                self.add_path('/Mgmt/Connection', CONNECTION)
                self.add_path('/ProductId', 16) # value used in ac_sensor_bridge.cpp of dbus-cgwacs
                self.add_path('/ProductName',  _get_string(regs[0:15])+" "+_get_string(regs[16:31]))
                self.add_path('/CustomName', "Grid meter " +_get_string(regs[32:39]))
	        self.add_path('/Ac/Power', None, gettextcallback=_w)
                self.add_path('/Ac/L1/Voltage', None, gettextcallback=_v)
                self.add_path('/Ac/L2/Voltage', None, gettextcallback=_v)
                self.add_path('/Ac/L3/Voltage', None, gettextcallback=_v)
                self.add_path('/Ac/L1/Current', None, gettextcallback=_a)
                self.add_path('/Ac/L2/Current', None, gettextcallback=_a)
                self.add_path('/Ac/L3/Current', None, gettextcallback=_a)
                self.add_path('/Ac/L1/Power', None, gettextcallback=_w)
                self.add_path('/Ac/L2/Power', None, gettextcallback=_w) 
                self.add_path('/Ac/L3/Power', None, gettextcallback=_w) 
                self.add_path('/Ac/L1/Energy/Forward', None, gettextcallback=_kwh)
                self.add_path('/Ac/L2/Energy/Forward', None, gettextcallback=_kwh)
                self.add_path('/Ac/L3/Energy/Forward', None, gettextcallback=_kwh)
                self.add_path('/Ac/L1/Energy/Reverse', None, gettextcallback=_kwh)
                self.add_path('/Ac/L2/Energy/Reverse', None, gettextcallback=_kwh)
                self.add_path('/Ac/L3/Energy/Reverse', None, gettextcallback=_kwh)
                self.add_path('/Ac/Energy/Forward', None, gettextcallback=_kwh) # energy bought from the grid
                self.add_path('/Ac/Energy/Reverse', None, gettextcallback=_kwh) # energy sold to the grid

    if physical == 'pvinverter':
        # if open() is ok, read register (modbus function 0x03)
        if c.is_open():
            # read registers, store result in regs list
            regs = c.read_holding_registers(40004, 56)
            if regs:                
                self.add_path('/DeviceInstance', instance)
                self.add_path('/FirmwareVersion', _get_string(regs[32:47]))
                self.add_path('/DataManagerVersion', VERSION)
                self.add_path('/Serial', _get_string(regs[48:55]))
                self.add_path('/Mgmt/Connection', CONNECTION)
                self.add_path('/ProductId', 41284) # value used in ac_sensor_bridge.cpp of dbus-cgwacs
                self.add_path('/ProductName', _get_string(regs[0:15])+" "+_get_string(regs[16:31]))
                self.add_path('/Ac/Energy/Forward', None, gettextcallback=_kwh)
                self.add_path('/Ac/Power', None, gettextcallback=_w)
                self.add_path('/Ac/L1/Current', None, gettextcallback=_a)
                self.add_path('/Ac/L2/Current', None, gettextcallback=_a)
                self.add_path('/Ac/L3/Current', None, gettextcallback=_a)
                self.add_path('/Ac/L1/Energy/Forward', None, gettextcallback=_kwh)
                self.add_path('/Ac/L2/Energy/Forward', None, gettextcallback=_kwh)
                self.add_path('/Ac/L3/Energy/Forward', None, gettextcallback=_kwh)
                self.add_path('/Ac/L1/Power', None, gettextcallback=_w)
                self.add_path('/Ac/L2/Power', None, gettextcallback=_w)
                self.add_path('/Ac/L3/Power', None, gettextcallback=_w)
                self.add_path('/Ac/L1/Voltage', None, gettextcallback=_v)
                self.add_path('/Ac/L2/Voltage', None, gettextcallback=_v)
                self.add_path('/Ac/L3/Voltage', None, gettextcallback=_v)
                self.add_path('/Ac/MaxPower', None, gettextcallback=_w)
                self.add_path('/ErrorCode', None)
                self.add_path('/Position', 0)
                self.add_path('/StatusCode', None)

    if physical == 'temp_pvinverter':
        # if open() is ok, read register (modbus function 0x03)
        if c.is_open():
            # read registers, store result in regs list
            regs = c.read_holding_registers(40004, 56)
            if regs:                
                self.add_path('/DeviceInstance', instance)
                self.add_path('/FirmwareVersion', _get_string(regs[32:47]))
                self.add_path('/DataManagerVersion', VERSION)
                self.add_path('/Serial', _get_string(regs[48:55]))
                self.add_path('/Mgmt/Connection', CONNECTION)
                self.add_path('/ProductName', _get_string(regs[0:15])+" "+_get_string(regs[16:31]))
                self.add_path('/ProductId', 0) 
                self.add_path('/CustomName', 'PV Inverter Temperature')
                self.add_path('/Temperature', None, gettextcallback=_c)
                self.add_path('/Status', 0)
                self.add_path('/TemperatureType', 0, writeable=True)

    if physical == 'limit_pvinverter':
        # if open() is ok, read register (modbus function 0x03)
        if c.is_open():
            # read registers, store result in regs list
            regs = c.read_holding_registers(40004, 56)
            if regs:                
                self.add_path('/DeviceInstance', instance)
                self.add_path('/FirmwareVersion', _get_string(regs[32:47]))
                self.add_path('/DataManagerVersion', VERSION)
                self.add_path('/Serial', _get_string(regs[48:55]))
                self.add_path('/Mgmt/Connection', CONNECTION)
                self.add_path('/ProductName', _get_string(regs[0:15])+" "+_get_string(regs[16:31]))
                self.add_path('/ProductId', 0) 
                self.add_path('/CustomName', 'PV Inverter Limiter active')
                self.add_path('/State', None)
                self.add_path('/Status', 0)
                self.add_path('/Type', 2, writeable=True)
                self.add_path('/Alarm', None, writeable=True)


    return self
 
dbusservice = {} # Dictonary to hold the multiple services
 
base = 'com.victronenergy'
 
# service defined by (base*, type*, id*, instance):
# * items are include in service name
# Create all the dbus-services we want
dbusservice['grid']           = new_service(base, 'grid',           'grid',              0, 0)
dbusservice['pvinverter.pv0'] = new_service(base, 'pvinverter.pv0', 'pvinverter',        0, 20)
dbusservice['adc-temp0']      = new_service(base, 'temperature',    'temp_pvinverter',   0, 26)
dbusservice['digitalinput0']  = new_service(base, 'digitalinput',    'limit_pvinverter', 0, 10)

# Everything done so just set a time to run an update function to update the data values every 10 seconds.
gobject.timeout_add(1000, _update)

 
print 'Connected to dbus, and switching over to gobject.MainLoop() (= event based)'
mainloop = gobject.MainLoop()
mainloop.run()
